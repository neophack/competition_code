#include <pcl/io/pcd_io.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <iomanip>
#include <strstream>
//boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer(new pcl::visualization::PCLVisualizer("viewer"));
pcl::PointCloud<pcl::PointXYZ>::Ptr clicked_points_3d(new pcl::PointCloud<pcl::PointXYZ>);
int num = 0;
void remove_re_point(pcl::PointCloud<pcl::PointXYZ>::Ptr &cloud)
{
    //int number=0;
    pcl::PointCloud<pcl::PointXYZ>::iterator itr= cloud->points.begin();;
    pcl::PointCloud<pcl::PointXYZ>::iterator itr1;
    pcl::PointCloud<pcl::PointXYZ>::iterator itr_b;
    while(itr !=--cloud->points.end())
    {
        itr1=itr;
        itr_b=++itr1;
        if(itr->x==itr_b->x&&itr->y==itr_b->y&&itr->z==itr_b->z)
        {
            itr = cloud->points.erase(itr);
            //number++;
        }
        else
            ++itr;
    }
    //std::cout<<number<<std::endl;

}
int main()
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr light(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PointCloud<pcl::PointXYZ>::Ptr ground(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PointCloud<pcl::PointXYZ>::Ptr line(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PointCloud<pcl::PointXYZ>::Ptr tower(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PointCloud<pcl::PointXYZ>::Ptr tree(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::io::loadPCDFile("/home/ysl/图片/训练文件/light/light.pcd", *light);
    pcl::io::loadPCDFile("/home/ysl/图片/训练文件/ground/ground.pcd", *ground);
    pcl::io::loadPCDFile("/home/ysl/图片/训练文件/line/line.pcd", *line);
    pcl::io::loadPCDFile("/home/ysl/图片/训练文件/tower/tower.pcd", *tower);
    pcl::io::loadPCDFile("/home/ysl/图片/训练文件/tree/tree.pcd", *tree);
    std::cout<<"1"<<std::endl;
    // viewer->addPointCloud(cloud, "bunny");
    remove_re_point(light);
    remove_re_point(ground);
    remove_re_point(line);
    remove_re_point(tower);
    remove_re_point(tree);
    std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> onekindcloud;
    std::vector<pcl::PointCloud<pcl::PointXYZRGB>::Ptr> onekindRGBcloud;

    pcl::PointCloud<pcl::PointXYZRGB>::Ptr temptete(new pcl::PointCloud<pcl::PointXYZRGB>());
    onekindcloud.push_back(light);
    onekindcloud.push_back(ground);
    onekindcloud.push_back(line);
    onekindcloud.push_back(tower);
    onekindcloud.push_back(tree);
    std::cout<<"1"<<std::endl;

    char* path = "/home/ysl/图片/训练文件/test.txt"; // 你要创建文件的路径

    for (int i = 0; i < onekindcloud.size(); i++)
    {
        int count = onekindcloud[i]->points.size();
        temptete->resize(count);
        temptete->width = count;
        temptete->height = 1;
        temptete->is_dense = false;
        for (int j = 0; j <  onekindcloud[i]->points.size(); j++)
        {
            temptete->points[j].x=onekindcloud[i]->points[j].x;
            temptete->points[j].y=onekindcloud[i]->points[j].y;
            temptete->points[j].z=onekindcloud[i]->points[j].z;
            temptete->points[j].r=255;
            temptete->points[j].g=0;
            temptete->points[j].b=0;
        }
        std::cout<<"1"<<std::endl;

            std::strstream ss;
            ss<<i;
            std::string name;
            ss>>name;
            name=name+".pcd";
           pcl::io::savePCDFileASCII(name,*temptete);
    }



    //    while (!viewer->wasStopped())
    //    {
    //        viewer->spin();
    //       // boost::this_thread::sleep(boost::posix_time::microseconds(100000));
    //    }
}

