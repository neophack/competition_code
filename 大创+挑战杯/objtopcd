#include <boost/make_shared.hpp>              //boost指针相关头文件
#include <pcl/point_types.h>                  //点类型定义头文件
#include <pcl/point_cloud.h>                  //点云类定义头文件
#include <pcl/point_representation.h>         //点表示相关的头文件
#include <pcl/io/pcd_io.h>                    //PCD文件打开存储类头文件
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <pcl/io/ply_io.h>
#include <pcl/io/vtk_lib_io.h>
#include <pcl/common/transforms.h>
#include <vtkVersion.h>
#include <vtkPLYReader.h>
#include <vtkOBJReader.h>
#include <vtkTriangle.h>
#include <vtkTriangleFilter.h>
#include <vtkPolyDataMapper.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/console/print.h>
#include <pcl/console/parse.h>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/path.hpp>
//#include <string>
#include <pcl/filters/voxel_grid.h>           //用于体素网格化的滤波类头文件
#include <pcl/filters/filter.h>             //滤波相关头文件
#include <pcl/features/normal_3d.h>         //法线特征头文件
#include <pcl/registration/icp.h>           //ICP类相关头文件
#include <pcl/registration/icp_nl.h>        //非线性ICP 相关头文件
#include <pcl/registration/transforms.h>      //变换矩阵类头文件
#include <pcl/visualization/pcl_visualizer.h>  //可视化类头文件
#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/filter_indices.h>
#include <pcl/point_cloud.h>
#include <iostream>
#include <fstream>
#include <string>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <liblas/liblas.hpp>

#include <pcl/io/pcd_io.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <iostream>
#include <fstream>
#include <string>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <liblas/liblas.hpp>
#include <pcl/visualization/point_cloud_color_handlers.h>
#include <iostream>
// PCL specific includes
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/console/print.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/visualization/cloud_viewer.h>
#include <iostream>
#include <pcl/point_types.h>
#include <pcl/filters/passthrough.h>

#include <pcl/ModelCoefficients.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/features/normal_3d.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>
#include <fstream>
#include <iosfwd>
#include <math.h>
#include <iomanip>
#include"stdlib.h"
#include "iostream"
#include "string"
#include <iostream>
#include <pcl/visualization/cloud_viewer.h>
#include<pcl/io/pcd_io.h>
#include<pcl/point_types.h>
#include <pcl/conversions.h>
#include <pcl/features/normal_3d.h>
#include <boost/thread/thread.hpp>
#include <pcl/common/common_headers.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/console/parse.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/io/pcd_io.h>
#include <pcl/common/impl/io.hpp>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/common/transforms.h>
#include <iostream>
#include <fstream>
#include <string>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <liblas/liblas.hpp>
#include <opencv2/opencv.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <ogr_spatialref.h>
#include <ogr_geometry.h>
#include<pcl/io/pcd_io.h>
#include<pcl/point_types.h>
#include<pcl/registration/icp.h>
#include <vector>
#include <string>
#include <fstream>
#include <pcl/io/pcd_io.h>
#include <pcl/io/obj_io.h>
#include <iostream>
#include <memory>
#include <iomanip>
#include <pcl/console/parse.h>
#include <pcl/io/obj_io.h>
#include <pcl/io/pcd_io.h>
#include <boost/filesystem.hpp>
#include <boost/xpressive/xpressive_dynamic.hpp>
#include <pcl/features/normal_3d_omp.h>
#include <pcl/surface/gp3.h>
#include <pcl/surface/poisson.h>


void poisson_reconstruction(pcl::PointCloud<pcl::PointXYZ>::Ptr object_cloud)
{
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>());
    pcl::copyPointCloud(*object_cloud, *cloud);
    /* pcl::PolygonMesh mesh;
    pcl::PointCloud<pcl::PointXYZRGB> cloud_color_mesh;
    pcl::fromPCLPointCloud2(mesh.cloud, *object_cloud);*/
    /*  pcl::PointCloud<pcl::PointXYZRGB>::Ptr filtered(new pcl::PointCloud<pcl::PointXYZRGB>());
      pcl::PassThrough<pcl::PointXYZRGB> filter;
      filter.setInputCloud(cloud);
      filter.filter(*filtered);
      cout << "passthrough filter complete" << endl;

    cout << "begin normal estimation" << endl;
      pcl::NormalEstimationOMP<pcl::PointXYZRGB, pcl::Normal> ne;//计算点云法向
      ne.setNumberOfThreads(8);//设定临近点
      ne.setInputCloud(cloud);
      ne.setRadiusSearch(0.01);//设定搜索半径
      Eigen::Vector4f centroid;
      pcl::compute3DCentroid(*cloud, centroid);//计算点云中心
      ne.setViewPoint(centroid[0], centroid[1], centroid[2]);//将向量计算原点置于点云中心

        pcl::PointCloud<pcl::Normal>::Ptr cloud_normals (new pcl::PointCloud<pcl::Normal>());
      ne.compute(*cloud_normals);
      cout << "normal estimation complete" << endl;
      cout << "reverse normals' direction" << endl;

//将法向量反向
      for(size_t i = 0; i < cloud_normals->size(); ++i)
      {
        cloud_normals->points[i].normal_x *= -1;
        cloud_normals->points[i].normal_y *= -1;
        cloud_normals->points[i].normal_z *= -1;
      }

//融合RGB点云和法向
      cout << "combine points and normals" << endl;
      pcl::PointCloud<pcl::PointXYZRGBNormal>::Ptr cloud_smoothed_normals(new pcl::PointCloud<pcl::PointXYZRGBNormal>());
      pcl::concatenateFields(*cloud, *cloud_normals, *cloud_smoothed_normals);

//泊松重建
      cout << "begin poisson reconstruction" << endl;
     pcl::Poisson<pcl::PointXYZRGBNormal> poisson;
      //poisson.setDegree(2);
      poisson.setDepth(8);
      poisson.setSolverDivide (6);
      poisson.setIsoDivide (6);

      poisson.setConfidence(false);
      poisson.setManifold(false);
      poisson.setOutputPolygons(false);

      poisson.setInputCloud(cloud_smoothed_normals);
      pcl::PolygonMesh mesh;
      poisson.reconstruct(mesh);

      cout << "finish poisson reconstruction" << endl;
*/
    pcl::PolygonMesh mesh;
    //给mesh染色
    pcl::PointCloud<pcl::PointXYZRGB> cloud_color_mesh;

    //pcl::fromPCLPointCloud2(mesh.cloud, cloud_color_mesh);

    pcl::KdTreeFLANN<pcl::PointXYZRGB> kdtree;
    kdtree.setInputCloud (cloud);
    // K nearest neighbor search
    int K = 5;
    std::vector<int> pointIdxNKNSearch(K);
    std::vector<float> pointNKNSquaredDistance(K);
    for(int i=0;i<cloud_color_mesh.points.size();++i)
    {
        uint8_t r = 0;
        uint8_t g = 0;
        uint8_t b = 0;
        float dist = 0.0;
        int red = 0;
        int green = 0;
        int blue = 0;
        uint32_t rgb;

        if ( kdtree.nearestKSearch (cloud_color_mesh.points[i], K, pointIdxNKNSearch, pointNKNSquaredDistance) > 0 )
        {
            for (int j = 0; j < pointIdxNKNSearch.size (); ++j)
            {

                r = cloud->points[ pointIdxNKNSearch[j] ].r;
                g = cloud->points[ pointIdxNKNSearch[j] ].g;
                b = cloud->points[ pointIdxNKNSearch[j] ].b;

                red += int(r);
                green += int(g);
                blue += int(b);
                dist += 1.0/pointNKNSquaredDistance[j];

                std::cout<<"red: "<<int(r)<<std::endl;
                std::cout<<"green: "<<int(g)<<std::endl;
                std::cout<<"blue: "<<int(b)<<std::endl;
                cout<<"dis:"<<dist<<endl;
            }
        }

        cloud_color_mesh.points[i].r = int(red/pointIdxNKNSearch.size ()+0.5);
        cloud_color_mesh.points[i].g = int(green/pointIdxNKNSearch.size ()+0.5);
        cloud_color_mesh.points[i].b = int(blue/pointIdxNKNSearch.size ()+0.5);


    }
    pcl::toPCLPointCloud2(cloud_color_mesh, mesh.cloud);
    pcl::io::saveOBJFile("object_mesh.obj", mesh);
}
void poisson_reconstruction1(pcl::PointCloud<pcl::PointXYZ>::Ptr &object_cloud,int s[],pcl::PolygonMesh &mesh)
{
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>());
   pcl::copyPointCloud(*object_cloud, *cloud);
    for(int i=0;i<object_cloud->points.size();i++)
    {
        cloud->points[i].r = 255;
        cloud->points[i].g = 255;
        cloud->points[i].b = 255;
    }
    pcl::toPCLPointCloud2(*cloud, mesh.cloud);
}
int main()
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr (new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PCDReader pcd;
    if (pcd.read ("/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/test_data_in.pcd", *pointCloudPtr) == -1)
        return (-1);
    //poisson_reconstruction(pointCloudPtr);
    pcl::PolygonMesh mesh;
    //pcl::fromPCLPointCloud2(mesh.cloud, *pointCloudPtr);
    // pcl::toPCLPointCloud2(*pointCloudPtr, mesh.cloud);
    int rgb_define[3]={255,255,255};
    poisson_reconstruction1(pointCloudPtr,rgb_define,mesh);
    pcl::io::saveOBJFile("test_data_in.obj", mesh);
    pcl::PolygonMesh mesh1;
    pcl::io::loadPolygonFile("test_data_in.obj",mesh1);

    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>());
    pcl::fromPCLPointCloud2(mesh1.cloud, *cloud);
    pcl::io::savePCDFileASCII("object_mesh_test.pcd",*cloud);

    return 0;
}

