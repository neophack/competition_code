//
// Created by ethan on 18-6-26.
//
#include <iostream>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/common/common.h>
#include <iostream>
#include <fstream>
#include <string>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <liblas/liblas.hpp>
#include <pcl/visualization/point_cloud_color_handlers.h>
#include <iostream>
// PCL specific includes
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/console/print.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/visualization/cloud_viewer.h>
#include <iostream>
#include <pcl/point_types.h>
#include <pcl/filters/passthrough.h>

#include <pcl/ModelCoefficients.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/features/normal_3d.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>
#include <fstream>
#include <iosfwd>
#include <math.h>
#include <iomanip>
#include"stdlib.h"
#include "iostream"
#include "string"
#include <iostream>
#include <pcl/visualization/cloud_viewer.h>
#include<pcl/io/pcd_io.h>
#include<pcl/point_types.h>
#include <pcl/conversions.h>
#include <pcl/features/normal_3d.h>
#include <boost/thread/thread.hpp>
#include <pcl/common/common_headers.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/console/parse.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/io/pcd_io.h>
#include <pcl/common/impl/io.hpp>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/common/transforms.h>
#include <iostream>
#include <fstream>
#include <string>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <liblas/liblas.hpp>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/common/common.h>
#include <opencv2/opencv.hpp>
#include <opencv/cv.h>
typedef pcl::PointXYZ Point;
namespace yan{
struct Map{
    std::vector<int> rows;
    std::vector<int> cols;
    std::vector<int> gray;
};
struct lines{
    std::vector<cv::Vec4i> l;
    std::vector <double> k;
    std::vector <double> b;
};
}
int canny(cv::Mat &Img_gray,cv::Mat &Nms);
void get_point_function(double point_cen,double &point_re,int k,int L,int num);
void get_up_down_point(cv::Point2d point_cen,cv::Point2d &point_up,cv::Point2d &point_down,int k,int L,bool flag);
double Multiply(cv::Point p1, cv::Point p2, cv::Point p0);
bool isContain(cv::Point mp1,cv::Point mp2,cv::Point mp3,cv::Point mp4,cv::Point mp);
using namespace std;
void viewer(string name,pcl::PointCloud<Point>::Ptr pointCloudPtr,string type_)
{
    pcl::visualization::PCLVisualizer p (name);
    p.setBackgroundColor (1, 1, 1);

    std::cerr << "PointCloudColorHandlerGenericField demo." << std::endl;
    pcl::visualization::PointCloudColorHandlerGenericField<Point> handler_z (pointCloudPtr, type_);

    p.addPointCloud (pointCloudPtr, handler_z, "cloud_z");
    p.spin ();
    p.removePointCloud ("cloud_z");


    //p.addCoordinateSystem (0.1);

    // Demonstrate usage of spinOnce()
    p.resetStoppedFlag();
    p.removePointCloud ("cloud");
    p.spin ();
    std::cerr << "ok" << std::endl;
}
class powelines
{
public:
    void CreateNewPointcloud(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,int count);
    void fitter(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr);
    void GetPointArea(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr,pcl::PointXYZ min,pcl::PointXYZ max);
    void GetDivisiveCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr,double z_sum,
                          pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr1,
                          pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr2);
    double GetAverageThreshold(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr);
    void GetPointCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,
                       double new_z_sum,
                       pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr1,
                       pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr2);
    void GetAltitudeMap(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,cv::Mat &Map);
    void Getlineskb(std::vector<cv::Vec4i> lines,std::vector<cv::Vec6d> &lines_kb);
    void Getlines(std::vector<cv::Vec6d> lines_kb,double T1,double T2,std::vector<std::vector<cv::Vec6d>> &lines);
    void GetOneline(std::vector<std::vector<cv::Vec6d>> &lines,int sigma,
                    std::vector<cv::Vec6d> &onelines);
    void Getedge(std::vector<cv::Vec6d> Lines_need,std::vector<cv::Vec6d> &maxminline);
    void GetlineCloud(std::vector<cv::Vec6d> maxminLines_need,cv::Mat Map);

};
void powelines::fitter(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr)
{
    std::vector<int> indices;
    pcl::removeNaNFromPointCloud(*pointCloudPtr, *pointCloudPtr, indices);

    pcl::StatisticalOutlierRemoval<pcl::PointXYZ> sor;// 创建滤波器对象
    sor.setInputCloud(pointCloudPtr);                        //设置滤波的点云
    sor.setMeanK(3);                                //设置在进行统计时考虑查询点邻近点数
    sor.setStddevMulThresh(20.0);                    //设置判断是否为离群点的阈值
    sor.filter(*pointCloudPtr);
}
void powelines::CreateNewPointcloud(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,int count)
{
    pointCloudPtr->resize(count);
    pointCloudPtr->width = count;
    pointCloudPtr->height = 1;
    pointCloudPtr->is_dense = false;
}
void powelines::GetPointArea(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr,pcl::PointXYZ min,pcl::PointXYZ max)
{
    //执行滤波处理保存内点到cloud_filtered
    //pcl::PointXYZ min;//用于存放三个轴的最小值
    //pcl::PointXYZ max;//用于存放三个轴的最大值

    pcl::getMinMax3D(*pointCloudPtr,min,max);

}
double powelines::GetAverageThreshold(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr)
{
    double z_sum=0;
    for(int i=0;i<pointCloudPtr->size();i++)
    {
        z_sum+=pointCloudPtr->points[i].z;
    }
    return z_sum/pointCloudPtr->size();
}
void powelines::GetDivisiveCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr pointCloudPtr,double z_sum,
                                 pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr1,
                                 pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr2)
{
    std::vector<pcl::PointXYZ> Points1;
    std::vector<pcl::PointXYZ> Points2;

    for(int i=0;i<pointCloudPtr->size();i++)
    {
        if(pointCloudPtr->points[i].z>z_sum)
        {
            Points1.push_back(pointCloudPtr->points[i]);
        }
        else{
            Points2.push_back(pointCloudPtr->points[i]);
        }
    }

    int count = Points1.size();
    pointCloudPtr1->resize(count);
    pointCloudPtr1->width = count;
    pointCloudPtr1->height = 1;
    pointCloudPtr1->is_dense = false;

    count = Points2.size();
    pointCloudPtr2->resize(count);
    pointCloudPtr2->width = count;
    pointCloudPtr2->height = 1;
    pointCloudPtr2->is_dense = false;
    for(int i=0;i<Points1.size();i++)
    {
        pointCloudPtr1->points[i]= Points1[i];
    }
    for(int i=0;i<Points2.size();i++)
    {
        pointCloudPtr2->points[i]= Points2[i];
    }
}
void powelines::GetPointCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,
                              double new_z_sum,
                              pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr1,
                              pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr2)
{
    double z_sum=0;
    double z_sum1=0;
    double z_sum2=0;
    new_z_sum=0;
    double error=10;
    int times=1;
    powelines test;
    z_sum=test.GetAverageThreshold(pointCloudPtr);
    while(!(0.7<error&&error<0.9)){
        test.GetDivisiveCloud(pointCloudPtr,z_sum,pointCloudPtr1,pointCloudPtr2);
        z_sum1=test.GetAverageThreshold(pointCloudPtr1);
        z_sum2=test.GetAverageThreshold(pointCloudPtr2);
        new_z_sum=(z_sum1+z_sum2)/2;
        error=abs(new_z_sum-z_sum);
        z_sum=new_z_sum;
        std::cout<<error<<std::endl;
        times++;
        if(times>100)
            break;
    }
}
void powelines::GetAltitudeMap(pcl::PointCloud<pcl::PointXYZ>::Ptr &pointCloudPtr,cv::Mat &Map)
{
    int width;
    int height;

    pcl::PointXYZ min;
    pcl::PointXYZ max;
    pcl::getMinMax3D(*pointCloudPtr,min,max);
    width=int(max.x-min.x);
    height=int(max.y-min.y);
    yan::Map MAP;
    for(int i=0;i<pointCloudPtr->points.size();i++)
    {

        if(int((pointCloudPtr->points[i].z-min.z)/(max.z-min.z)*255)>255)
            MAP.gray.push_back(255);
        else MAP.gray.push_back(int((pointCloudPtr->points[i].z-min.z)/(max.z-min.z)*255));
    }
    Map=cv::Mat::zeros(height,width,CV_8UC1);
    for (size_t k = 0; k < pointCloudPtr->points.size (); ++k) //显示所有的点
    {
        int j=int(pointCloudPtr->points[k].x-min.x);
        int i=int(pointCloudPtr->points[k].y-min.y);
        Map.at<uchar>(i,j)=MAP.gray[k];
    }
}
void powelines::Getlineskb(std::vector<cv::Vec4i> lines,std::vector<cv::Vec6d> &lines_kb)
{

    //输入一堆直线，返回每条直线的斜率和截距
    //Vec2f为2个点的float，参照存储直线的数据结构
    double k = 0; //直线斜率
    double b = 0; //直线截距
    //std::vector <cv::Point2d> lines_kb;//直线斜率的反正切值
    cv::Vec6d lines_kb_t;
    for (unsigned int i = 0; i<lines.size(); i++)
    {

        k = (double)(lines[i][3] - lines[i][1]) / (double)(lines[i][2] - lines[i][0]); //求出直线的斜率// -3.1415926/2-----+3.1415926/2
        b = (double)lines[i][1] - k * (double)lines[i][0]; //求出直线的斜率

        lines_kb_t[0]=lines[i][0];
        lines_kb_t[1]=lines[i][1];
        lines_kb_t[2]=lines[i][2];
        lines_kb_t[3]=lines[i][3];
        lines_kb_t[4]=k;
        lines_kb_t[5]=b;
        lines_kb.push_back(lines_kb_t);
    }

}
void powelines::Getlines(std::vector<cv::Vec6d> lines_kb,double T1,double T2,std::vector<std::vector<cv::Vec6d>> &lines)
{
    std::vector<cv::Vec6d> lineskb;
    while(lines_kb.size()!=0)
    {
        for(vector<cv::Vec6d>::iterator it=lines_kb.begin();it<lines_kb.end();it++)
        {
            if(it==lines_kb.begin())
            {
                lineskb.push_back(*it);
            }
            else if((abs(lines_kb[0][4]-(*it)[4])<T1)&&(abs(lines_kb[0][5]-(*it)[5])<T2))
            {

                lineskb.push_back(*it);
                lines_kb.erase(it);
            }
        }
        lines.push_back(lineskb);
        lines_kb.erase(lines_kb.begin());
    }
}
/*ransca找直线*/
void powelines::GetOneline(std::vector<std::vector<cv::Vec6d>> &lines,int sigma,
                           std::vector<cv::Vec6d> &onelines)
{
    std::vector<double>lines_d;
    cv::Vec6d bestline;
    cv::Vec6d line;
    int total=1;
    int pretotal=0;
    for(size_t j = 0; j < lines.size(); j++)//多少簇直线
    {
        for (size_t i = 0; i < lines[j].size(); i++)//一簇多少直线
        {
            // double x1=lines[j][i][0];
            // double y1=lines[j][i][1];
            // double x2=lines[j][i][2];
            // double y2=lines[j][i][3];
            double k = (double)(lines[j][i][3] - lines[j][i][1]) / (double)(lines[j][i][2] - lines[j][i][0]); //求出直线的斜率// -3.1415926/2-----+3.1415926/2
            double b = (double)lines[j][i][1] - k * (double)lines[j][i][0]; //求出直线的截距
            line[0]=lines[j][i][0];
            line[1]=lines[j][i][1];
            line[2]=lines[j][i][2];
            line[3]=lines[j][i][3];
            line[4]=k;
            line[5]=b;
            for (size_t times = 0; times < lines[j].size(); times++)
            {
                for(int num=0;num<2;num++)
                {
                    double dist=lines[j][times][2*num]*k+b-lines[j][times][2*num+1];
                    lines_d.push_back(abs(dist));
                }
            }
            for(size_t i=0;i<lines_d.size();i++)
            {
                if(lines_d[i]<sigma)
                    total++;
            }

            if(total>=pretotal)
            {
                pretotal=total;
                bestline=line;
            }
            if(total>=lines[j].size())
                break;
        }
        onelines.push_back(bestline);
    }

}
// MaxMinDisTest.cpp :
#include <iostream>
#include <math.h>
void getcenter(std::vector<cv::Point2d> centers)
{
  const int N=centers.size();
  int center[20];
//  float s[2][N]={{0,3,2,1,5,4,6,5,6,7},
//                 {0,8,2,1,3,8,3,4,4,5}};
  float s[2][N];
  for(int i=0;i<N;i++)
  {
     s[0][i]=centers[i].x;
     s[1][i]=centers[i].y;
  }
  float D[20][N];
  float min[N];
  int minindex[N];
  int clas[N];
  float theshold;
  float theta=0.5;
  float D12=0.0;
  float tmp=0;
  int index=0;
  center[0]=0;//first center
  int i,k=0,j,l;
  for(j=0;j<N;j++)
  { tmp=(s[1][j]-s[1][0])*(s[0][j]-s[0][0])+(s[1][j]-s[1][0])*(s[1][j]-s[1][0]);
    D[0][j]=(float)sqrt(tmp);
    if(D[0][j]>D12) {D12=D[0][j];index=j;}
  }
  center[1]=index;//second center
  k=1;
  index=0;
  theshold=D12;
  while(theshold>theta*D12){
       for(j=0;j<N;j++){
           tmp=(s[0][j]-s[0][center[k]])*(s[0][j]-s[0][center[k]])+
                  (s[1][j]-s[1][center[k]])*(s[1][j]-s[1][center[k]]);
           D[k][j]=(float)sqrt(tmp);}
       for(j=0;j<N;j++){
           float tmp=D12;
           for(l=0;l<=k;l++)
               if (D[l][j]<tmp) {tmp=D[l][j];index=l;};
           min[j]=tmp;minindex[j]=index;
          }//min-operate
       float max=0;index=0;
       for(j=0;j<N;j++)
         if(min[j]>max) {max=min[j];index=j;}
       if (max>theta*D12){k++;center[k]=index;}// add a center
       theshold=max;// prepare to loop next time
     }  //求出所有中心,final array min[] is still useful
   for(j=0;j<N;j++)  clas[j]=minindex[j];
   for(i=0;i<2;i++)
   {for(j=0;j<N;j++)
       std::cout<<s[i][j]<<"  ";
    std::cout<<"\n";
   }
   std::cout<<"k="<<k+1<<" ";
   std::cout<<"center(s):";
   for(l=0;l<k;l++) cout<<center[l]+1<<"--";cout<<center[k]+1;
   std::cout<<"\n";
   for(j=0;j<N;j++)
       std::cout<<clas[j]+1<<"  ";
   std::cout<<"\n";
}
void powelines::Getedge(std::vector<cv::Vec6d> Lines_need,std::vector<cv::Vec6d> &maxminline)
    {
//      std::vector<cv::Point2d> center;
//        for(int i=0;i<Lines_need.size();i++)
//        {
//            double k=Lines_need[i][4];
//            double b=Lines_need[i][5];
//            center.push_back(cv::Point2d(k,b));
//        }
//        getcenter(center);
    double max=Lines_need[0][5];
    double min=Lines_need[0][5];
    cv::Vec6d maxline=Lines_need[0];
    cv::Vec6d minline=Lines_need[0];
    for(int i=0;i<Lines_need.size();i++)
    {
       if(Lines_need[i][5]>max)
       {
          maxline=Lines_need[i];
          max=Lines_need[i][5];
       }
       if(Lines_need[i][5]<min)
       {
          minline=Lines_need[i];
          min=Lines_need[i][5];
       }
    }
    std::cout<<max<<" "<<min<<std::endl;
    for(int i=0;i<Lines_need.size();i++)
    {
      std::cout<<Lines_need[i][5]<<std::endl;
    }
    maxminline.push_back(maxline);
    maxminline.push_back(minline);
    }
void powelines::GetlineCloud(std::vector<cv::Vec6d> maxminLines_need,cv::Mat Map)
{
       int height=Map.rows;
       int K=0;
       int L_sx=4;
       int L_zy=16;
       for(int i=0;i<maxminLines_need.size();i++)
       {
           K=K+maxminLines_need[i][4];
       }
       K=K/maxminLines_need.size();
       double b=(maxminLines_need[0][5]+maxminLines_need[1][5])/2;
       cv::Point2d Point_start((height-b)/K,height);
       cv::Point2d Point_end(-b/K,0);

       cv::Point2d point_up;
       cv::Point2d point_down;
       cv::Point2d Point_start_new;
       cv::Point2d Point_end_new;
       //由下向上
       get_up_down_point(Point_end,point_up,Point_end_new, K,L_sx,true);
       get_up_down_point(Point_start,Point_start_new,point_down, K,L_sx,true);
       double dist = sqrt((Point_start_new.x-Point_end_new.x)*(Point_start_new.x-Point_end_new.x)+
                          (Point_start_new.y-Point_end_new.y)*(Point_start_new.y-Point_end_new.y));
       int times=int(dist)%L_sx;
       point_up=Point_start_new;
       cv::Point2d point_lists[4];
       for(int i=0;i<times;i++)
       {
       //上下两个点
       get_up_down_point(point_up,point_up,point_down, K,L_sx,true);
       //左右两个点
       get_up_down_point(point_up,point_lists[0],point_lists[1],K,L_zy,false);
       get_up_down_point(point_down,point_lists[3],point_lists[2],K,L_zy,false);

       //再向上一格
       get_up_down_point(point_up,point_up,point_down, K,L_sx,true);
       }
}

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>
#include"math.h"



int main(int argc,char **argv)
{

    pcl::PointCloud<Point>::Ptr pointCloudPtr (new pcl::PointCloud<Point>);
    pcl::PointCloud<Point>::Ptr pointCloudPtr1 (new pcl::PointCloud<Point>);
    pcl::PointCloud<Point>::Ptr pointCloudPtr2 (new pcl::PointCloud<Point>);
    cv::Mat Map;

    pcl::PCDReader pcd;
    if (pcd.read ("/home/ysl/大创重构/文件/2018-05-28-09-46-22.pcd", *pointCloudPtr) == -1)
        return (-1);
    powelines test;
    double t=0;
    test.GetPointCloud(pointCloudPtr,t,pointCloudPtr1,pointCloudPtr2);
    test.GetAltitudeMap(pointCloudPtr1,Map);
    //cv::Canny(Map, Map, 3, 9, 3);
    canny(Map,Map);
    Map.convertTo(Map,CV_8UC1);
    std::vector<cv::Vec4i> Lines;
    std::vector<cv::Vec6d> Lines_kb;
    std::vector<std::vector<cv::Vec6d>> re_Lines;
    std::vector<cv::Vec6d> Lines_need;
    std::vector<cv::Vec6d> maxminLines_need;

    cv::HoughLinesP(Map, Lines, 1, CV_PI / 360, 170,30,15);

    test.Getlineskb(Lines,Lines_kb);
    test.Getlines(Lines_kb,0.01,0.01,re_Lines);

    Map.convertTo(Map,CV_8UC3);

    /* for(size_t j = 0; j < re_Lines.size(); j++)
        for (size_t i = 0; i < re_Lines[j].size(); i++)
        {

            cv::line(Map, cv::Point(re_Lines[j][i][0], re_Lines[j][i][1]), cv::Point(re_Lines[j][i][2], re_Lines[j][i][3]), cv::Scalar(rand()%255, rand()%255, rand()%255), 2, 8);
            cv::circle(Map,cv::Point(re_Lines[j][i][0],re_Lines[j][i][1]),10,cv::Scalar(rand()%255,rand()%255,rand()%255));
        }*/
    test.GetOneline(re_Lines,0.1,Lines_need);
//    for(size_t i = 0; i < Lines_need.size(); i++)
//        {

//            cv::line(Map, cv::Point(Lines_need[i][0], Lines_need[i][1]), cv::Point(Lines_need[i][2], Lines_need[i][3]), cv::Scalar(255, 255,255), 1, 8);
//            cv::circle(Map,cv::Point(Lines_need[i][0],Lines_need[i][1]),10,cv::Scalar(rand()%255,rand()%255,rand()%255));
//        }
    test.Getedge(Lines_need,maxminLines_need);
//    for(size_t i = 0; i < maxminLines_need.size(); i++)
//        {

//            cv::line(Map, cv::Point(maxminLines_need[i][0], maxminLines_need[i][1]), cv::Point(maxminLines_need[i][2], maxminLines_need[i][3]), cv::Scalar(255, 255,255), 1, 8);
//            cv::circle(Map,cv::Point(maxminLines_need[i][0],maxminLines_need[i][1]),10,cv::Scalar(rand()%255,rand()%255,rand()%255));
//        }
    pcl::PointCloud<Point>::Ptr pointCloudPtr_o2 (new pcl::PointCloud<Point>);
    pcl::PointXYZ min;
    pcl::PointXYZ max;
    pcl::getMinMax3D(*pointCloudPtr1,min,max);
    cv::Point point1(maxminLines_need[0][0], maxminLines_need[0][1]);
    cv::Point point2(maxminLines_need[0][2], maxminLines_need[0][3]);
    cv::Point point3(maxminLines_need[1][0], maxminLines_need[1][1]);
    cv::Point point4(maxminLines_need[1][2], maxminLines_need[1][3]);
    std::cout<<point1<<point2<<point3<<point4<<std::endl;
    std::vector<pcl::PointXYZ> point_o_s;
        pcl::PointXYZ point_o_;
        for (size_t k = 0; k < pointCloudPtr1->points.size (); ++k) //显示所有的点
        {
            cv::Point2f point_t;
            point_t.x=pointCloudPtr1->points[k].x-min.x;
            point_t.y=pointCloudPtr1->points[k].y-min.y;
            if(isContain(point1,point3,point4,point2,point_t))
                point_o_=pointCloudPtr1->points[k];
            if(point_o_.x!=0||point_o_.y!=0||point_o_.z!=0)
            {
                point_o_s.push_back(point_o_);
            }
        }
        int count = point_o_s.size();
        pointCloudPtr_o2->resize(count);
        pointCloudPtr_o2->width = count;
        pointCloudPtr_o2->height = 1;
        pointCloudPtr_o2->is_dense = false;
        for(int i=0;i<point_o_s.size();i++)
        {

            pointCloudPtr_o2->points[i].x = point_o_s[i].x;
            pointCloudPtr_o2->points[i].y = point_o_s[i].y;
            pointCloudPtr_o2->points[i].z = point_o_s[i].z;
            //pointCloudPtr_o2->points[i].r = 255;

        }
       // pcl::io::savePCDFileASCII ("gantaline.pcd", *pointCloudPtr_o2); //将点云保存到PCD文件中
        for (int j = 0; j <= 7; j++)
           {
               cv::line(Map, point1, point2, cv::Scalar(255,255,255), 1);

           }
//    cv::imshow("非极大值抑制图",Map);
//    cv::waitKey(0);
//    viewer("1",pointCloudPtr1,"z");
//    viewer("2",pointCloudPtr2,"z");
    pcl::io::savePCDFileASCII ("ground.pcd", *pointCloudPtr2); //将点云保存到PCD文件中
    pcl::io::savePCDFileASCII ("gantatree.pcd", *pointCloudPtr1); //将点云保存到PCD文件中
    return 0;
}

int canny(cv::Mat &Img_gray,cv::Mat &Nms)
{
    cv::Mat Img_in  , Img_out;
    cv::Mat scr;
    /* Img_in=imread("lenna.jpg");
  int rows=Img_in.rows;
  int cols=Img_in.cols;//获取图像尺寸

  cvtColor(Img_in,Img_gray,CV_BGR2GRAY);
  imshow("【灰度图】",Img_gray);//转化为灰度图
 */
    int rows=Img_gray.rows;
    int cols=Img_gray.cols;
    //step1:高斯平滑
    cv::Mat img_filt;
    cv::GaussianBlur(Img_gray,Img_out,cv::Size(3,3),0,0);
    //adaptiveThreshold(img_filt , Img_out , 255 ,ADAPTIVE_THRESH_MEAN_C , THRESH_BINARY,min(rows,cols), 0);
    //imshow("【二值图】",Img_out );
    Img_out.convertTo(Img_out,CV_32FC1); //将图像转换为float或double型，否则算梯度会报错

    /*step2:计算梯度（幅度和方向）
  选择一阶差分卷积模板：
  dx=[-1,-1;1,1] dy=[1,-1;1,-1]
 */
    cv::Mat gy=(cv::Mat_<char>(2,2)<<1,-1,
                1,-1);
    //定义一阶差分卷积梯度模板
    cv::Mat gx=(cv::Mat_<char>(2,2)<<-1,-1,
                1,1); //定义一阶差分卷积梯度模板
    cv::Mat img_gx , img_gy , img_g ;//定义矩阵
    cv::Mat img_dir=cv::Mat::zeros(rows , cols , CV_32FC1);//定义梯度方向矩阵,计算角度为float型

    cv::filter2D(Img_out, img_gx , Img_out.depth(), gx);  //获取x方向的梯度图像.使用梯度模板进行二维卷积,结果与原图像大小相同
    cv::filter2D(Img_out, img_gy , Img_out.depth(), gy);  //获取x方向的梯度图像.使用梯度模板进行二维卷积,结果与原图像大小相同
    img_gx=img_gx.mul(img_gx);//点乘（每个像素值平方）
    img_gy=img_gy.mul(img_gy);//点乘（每个像素值平方）
    img_g=img_gx+img_gy;
    sqrt(img_g, img_g); //梯度幅值图像

    //求梯度方向图像
    for(int i=0;i<rows; i++)
    {
        for(int j=0 ; j<cols; j++)
        {
            img_dir.at<float>(i,j)=cv::fastAtan2(img_gy.at<float>(i,j) , img_gx.at<float>(i,j));//求角度
        }
    }


    /* step3:对梯度幅值进行非极大值抑制
首先将角度划分成四个方向范围:水平(0°)、45°、垂直(90°)、135°
*/
    Nms=cv::Mat::zeros(rows , cols , CV_32FC1);//定义一个非极大值抑制图像，float型
    for(int i=0;i<rows; i++)
    {
        for(int j=0 ; j<cols; j++)
        {
            if(img_dir.at<float>(i,j) <=22.5 && img_dir.at<float>(i,j)>=0 || img_dir.at<float>(i,j) >=157.5 && img_dir.at<float>(i,j)<=202.5
                    || img_dir.at<float>(i,j)>=337.5 && img_dir.at<float>(i,j)<=360)
                img_dir.at<float>(i,j)=0;

            else if(img_dir.at<float>(i,j)>22.5 && img_dir.at<float>(i,j)<=67.5 || img_dir.at<float>(i,j)>202.5 && img_dir.at<float>(i,j)<=247.5)
                img_dir.at<float>(i,j)=45;
            else if(img_dir.at<float>(i,j)>67.5 && img_dir.at<float>(i,j)<=112.5 || img_dir.at<float>(i,j)>247.5 && img_dir.at<float>(i,j)<=292.5)
                img_dir.at<float>(i,j)=90;
            else if(img_dir.at<float>(i,j)>112.5 && img_dir.at<float>(i,j)<157.5 || img_dir.at<float>(i,j)>292.5 && img_dir.at<float>(i,j)<337.5)
                img_dir.at<float>(i,j)=135;
        }
    }

    for(int i=1;i<rows-1; i++)
    {
        for(int j=1; j<cols-1; j++)
        {
            if ( img_dir.at<float>(i,j) == 90 && img_g.at<float>(i,j) == max(img_g.at<float>(i,j), max(img_g.at<float>(i,j+1), img_g.at<float>(i,j-1))))
                Nms.at<float>(i,j) = img_g.at<float>(i,j);
            else if ( img_dir.at<float>(i,j) == 45 && img_g.at<float>(i,j) == max(img_g.at<float>(i,j),max(img_g.at<float>(i-1,j+1), img_g.at<float>(i+1,j-1))))
                Nms.at<float>(i,j) = img_g.at<float>(i,j);
            else if( img_dir.at<float>(i,j) == 0 && img_g.at<float>(i,j) == max(img_g.at<float>(i,j),max( img_g.at<float>(i-1,j), img_g.at<float>(i+1,j))))
                Nms.at<float>(i,j) = img_g.at<float>(i,j);
            else if ( img_dir.at<float>(i,j) == 135 && img_g.at<float>(i,j) == max(img_g.at<float>(i,j),max(img_g.at<float>(i-1,j-1), img_g.at<float>(i+1,j+1))))
                Nms.at<float>(i,j) = img_g.at<float>(i,j);
        }
    }

    /*step4:双阈值检测和连接边缘
*/
    cv::Mat img_dst=cv::Mat::zeros(rows , cols , CV_32FC1);//定义一个双阈值图像，float型
    double TH,TL;
    double maxVal=0;//必须为double类型，且必须赋初值，否则报错
    Nms.convertTo(Nms,CV_64FC1); //为了计算，将非极大值抑制图像转为double型
    cv::minMaxLoc( Nms ,NULL, &maxVal,NULL,NULL); //求矩阵 Nms最大值
    TH=0.3*maxVal ;//高阈值
    TL=0.1*maxVal;//低阈值

    for(int i=0;i<rows; i++)
    {
        for(int j=0 ; j<cols; j++)
        {
            if( Nms.at<double>(i,j)<TL)
                img_dst.at<float>(i,j)=0;
            else if( Nms.at<double>(i,j)>TH)
                img_dst.at<float>(i,j)=1;
            else if(Nms.at<double>(i-1,j-1)<TL || Nms.at<double>(i-1,j)<TL || Nms.at<double>(i-1,j+1)<TL ||
                    Nms.at<double>(i,j-1)<TL|| Nms.at<double>(i,j+1)<TL || Nms.at<double>(i+1,j-1)<TL ||
                    Nms.at<double>(i+1,j)<TL || Nms.at<double>(i+1,j+1)<TL)
                img_dst.at<float>(i,j)=1;
        }
    }
    //imshow("非极大值抑制图",Nms);
    //imshow(" 边缘检测图", img_dst);
    //imwrite(" 边缘检测效果图.jpg",img_dst);//保存图像
    //waitKey(0);
    return 0;
}
void get_point_function(double point_cen,double &point_re,int k,int L,int num)
{
    if(num==1)
        point_re=point_cen+(L*k)/(2*sqrt(k*k+1));
    if(num==2)
        point_re=point_cen-(L*k)/(2*sqrt(k*k+1));
    if(num==3)
        point_re=point_cen+L/(2*sqrt(k*k+1));
    if(num==4)
        point_re=point_cen-L/(2*sqrt(k*k+1));
}
void get_up_down_point(cv::Point2d point_cen,cv::Point2d &point_up,cv::Point2d &point_down,int k,int L,bool flag)
{
    if(flag){
        get_point_function(point_cen.y,point_down.y,k,L,1);
        get_point_function(point_cen.y,point_up.y,k,L,2);
        if(k<0)
        {
            get_point_function(point_cen.x,point_down.x,k,L,4);
            get_point_function(point_cen.x,point_up.x,k,L,3);
        }
        else {
            get_point_function(point_cen.x,point_down.x,k,L,3);
            get_point_function(point_cen.x,point_up.x,k,L,4);
        }}
    else{
        get_point_function(point_cen.x,point_down.x,k,L,1);
        get_point_function(point_cen.x,point_up.x,k,L,2);
        if(k>0)
        {
            get_point_function(point_cen.y,point_down.y,k,L,4);
            get_point_function(point_cen.y,point_up.y,k,L,3);
        }
        else
        {
            get_point_function(point_cen.y,point_down.y,k,L,3);
            get_point_function(point_cen.y,point_up.y,k,L,4);
        }
    }
}
// 计算叉乘 |P0P1| × |P0P2|
double Multiply(cv::Point p1, cv::Point p2, cv::Point p0)
{
    return ((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y));
}

bool isContain(cv::Point mp1,cv::Point mp2,cv::Point mp3,cv::Point mp4,cv::Point mp)
{
    if (Multiply(mp, mp1, mp2) * Multiply(mp,mp4, mp3) <= 0

            && Multiply(mp, mp4, mp1) * Multiply(mp, mp3, mp2) <= 0)
        return true;

    return false;
}

