#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/io/vtk_lib_io.h>
#include <pcl/point_types.h>
#include <pcl/registration/icp.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/filters/filter_indices.h>
#include <pcl/common/transforms.h>
// #include <pcl/registration/icp_nl.h>

#include <vtkRenderWindow.h>
#include <vtkRendererCollection.h>
#include <vtkCamera.h>
#include <pcl/filters/random_sample.h>

void
loadFile(const char* fileName,
     pcl::PointCloud<pcl::PointXYZ> &cloud
)
{

  if ( pcl::io::loadPCDFile ( fileName, cloud ) == -1 )
  {
    PCL_ERROR ( "loadFile faild." );
    return;
  }


  // remove points having values of nan
  std::vector<int> index;
  pcl::removeNaNFromPointCloud ( cloud, cloud, index );
}

int main (int argc, char** argv)
{


  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_source ( new pcl::PointCloud<pcl::PointXYZ> () );
  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_target ( new pcl::PointCloud<pcl::PointXYZ> () );

  {
    // load source
    loadFile ( "/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/未命名文件夹/tower/2/2018-05-28-09-46-22_tower1.pcd", *cloud_source );
    // load target
    loadFile ( "/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/未命名文件夹/tower/2/2018-06-04-09-41-55_tower1.pcd", *cloud_target );
  }
  int count_num=cloud_target->size()*0.5+cloud_source->size()*0.5;
  pcl::RandomSample<pcl::PointXYZ> rs;
  rs.setInputCloud(cloud_source);
  //设置输出点的数量
  rs.setSample(count_num);

  //下采样并输出到cloud_out
  rs.filter(*cloud_source);

  pcl::RandomSample<pcl::PointXYZ> rs1;
  rs1.setInputCloud(cloud_target);
  //设置输出点的数量
  rs1.setSample(count_num);

  //下采样并输出到cloud_out
  rs1.filter(*cloud_target);

  // transformed source ---> target
  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_source_trans ( new pcl::PointCloud<pcl::PointXYZ> () );
  cloud_source_trans = cloud_source;


  boost::shared_ptr< pcl::visualization::PCLVisualizer > viewer ( new pcl::visualization::PCLVisualizer ("3D Viewer") );
  viewer->setBackgroundColor (0, 0, 0);

  pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> source_color ( cloud_source, 0, 255, 0 );
  viewer->addPointCloud<pcl::PointXYZ> (cloud_source, source_color, "source");
  viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "source");

  pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> target_color ( cloud_target, 255, 255, 255 );
  viewer->addPointCloud<pcl::PointXYZ> ( cloud_target, target_color, "target");
  viewer->setPointCloudRenderingProperties ( pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "target" );

  pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> source_trans_color ( cloud_source_trans, 255, 0, 255 );
  viewer->addPointCloud<pcl::PointXYZ> ( cloud_source_trans, source_trans_color, "source trans" );
  viewer->setPointCloudRenderingProperties ( pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "source trans" );


  // orthographic (parallel) projection; same with pressing key 'o'
  viewer->getRenderWindow()->GetRenderers()->GetFirstRenderer()->GetActiveCamera()->SetParallelProjection( 1 );

  viewer->resetCamera();




  pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ>::Ptr icp ( new pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ> () );
//   pcl::IterativeClosestPointNonLinear<pcl::PointXYZ, pcl::PointXYZ>::Ptr icp ( new pcl::IterativeClosestPointNonLinear<pcl::PointXYZ, pcl::PointXYZ> );
  icp->setMaximumIterations ( 100 );
  icp->setInputSource ( cloud_source_trans ); // not cloud_source, but cloud_source_trans!
  icp->setInputTarget ( cloud_target );
  icp->setMaxCorrespondenceDistance(20);
  icp->setTransformationEpsilon(1e-10);
  icp->setEuclideanFitnessEpsilon(0.001);
  icp->setMaximumIterations(100);
  icp->align ( *cloud_source_trans );
   if ( icp->hasConverged() )
   {
     viewer->updatePointCloud ( cloud_source_trans, source_trans_color, "source trans" );
     std::cout << icp->getFitnessScore() << std::endl;
   }


    viewer->spin();



  return( 0 );
}

