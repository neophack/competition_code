#include "pointmatcher/PointMatcher.h"
#include <cassert>
#include <iostream>
#include "boost/filesystem.hpp"
#include <pcl/io/pcd_io.h>
#include <pcl/point_cloud.h>
#include <pcl/common/transforms.h>
#include <pcl/visualization/pcl_visualizer.h>
using namespace std;
void transform_test( pcl::PointCloud<pcl::PointXYZ>::Ptr &match_cloud,
                     pcl::PointCloud<pcl::PointXYZ>::Ptr &transformed_cloud,  Eigen::Matrix4f transform_1)
{
    for (size_t i = 0; i < match_cloud->points.size (); ++i)
    {

        transformed_cloud->points[i].x=match_cloud->points[i].x*transform_1(0,0)
                      +match_cloud->points[i].y*transform_1(0,1)
                      +match_cloud->points[i].z*transform_1(0,2)
                      +transform_1(0,3);
        transformed_cloud->points[i].y=match_cloud->points[i].x*transform_1(1,0)
                      +match_cloud->points[i].y*transform_1(1,1)
                      +match_cloud->points[i].z*transform_1(1,2)
                      +transform_1(1,3);
        transformed_cloud->points[i].z=match_cloud->points[i].x*transform_1(2,0)
                      +match_cloud->points[i].y*transform_1(2,1)
                      +match_cloud->points[i].z*transform_1(2,2)
                      +transform_1(2,3);
    }

}
void pcdtoDataPoints(pcl::PointCloud<pcl::PointXYZ>::Ptr &source_cloud,
                     PointMatcher<float>::DataPoints &transform_cloud)
{

   std::vector<PointMatcher<float>::DataPoints::Label> features_label;
   PointMatcher<float>::DataPoints::Label features_label_t;
   features_label_t.span=1;
   features_label_t.text="x";
   features_label.push_back(features_label_t);
   features_label_t.span=1;
   features_label_t.text="y";
   features_label.push_back(features_label_t);
   features_label_t.span=1;
   features_label_t.text="z";
   features_label.push_back(features_label_t);
   features_label_t.span=1;
   features_label_t.text="pad";
   features_label.push_back(features_label_t);

  /* PointMatcher<float>::Matrix feature_cloud(4,source_cloud->size());
   for(size_t i=0;i<source_cloud->size();i++)
   {

       feature_cloud=source_cloud->points[i].x;
       transform_cloud.addFeature("x",feature_cloud);
       feature_cloud=source_cloud->points[i].y;
       transform_cloud.addFeature("y",feature_cloud);
       feature_cloud=source_cloud->points[i].z;
       transform_cloud.addFeature("z",feature_cloud);

   }*/
  // transform_cloud.DataPoints(feature_cloud,features_label_t);

}
int main(int argc, char *argv[])
{


    typedef PointMatcher<float> PM;
    typedef PM::DataPoints DP;

    std::string source_filename("/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/A/3/tower2.pcd");
    std::string target_filename("/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/A/3/tower1.pcd");
    std::string yaml_filename("/home/ysl/qt_project/build-pcl_test_cmake-unknown-Debug/A/icp_test.yaml");
    // Load point clouds
 const DP ref(DP::load(target_filename));
    const DP data(DP::load(source_filename));
    pcl::PointCloud<pcl::PointXYZ>::Ptr source_cloud(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::PointCloud<pcl::PointXYZ>::Ptr source_cloud_t(new pcl::PointCloud<pcl::PointXYZ>());

    pcl::PointCloud<pcl::PointXYZ>::Ptr transformed_cloud(new pcl::PointCloud<pcl::PointXYZ>());
    pcl::io::loadPCDFile(source_filename, *source_cloud);
    pcl::io::loadPCDFile(target_filename, *transformed_cloud);
 /*    DP ref;
     DP data;
    pcdtoDataPoints(source_cloud,data);
    pcdtoDataPoints(transformed_cloud,ref);*/

    PM::ICP icp_test;
    //cout<<ref.features(0,0)<<" "<<ref.features(1,0)<<" "<<ref.features(2,0)<<endl;
    // See the implementation of setDefault() to create a custom ICP algorithm
    //icp_test.setDefault();
    // load YAML config
    ifstream ifs(yaml_filename);

    icp_test.loadFromYaml(ifs);
    // Compute the transformation to express data in ref
    PM::TransformationParameters T = icp_test(data, ref);
    // transform_test(source_cloud,source_cloud_t,T);
    pcl::transformPointCloud (*source_cloud, *source_cloud_t, T);

     // Visualization
     printf(  "\nPoint cloud colors :  white  = original point cloud\n"
         "                        red  = transformed point cloud\n");
     pcl::visualization::PCLVisualizer viewer ("Matrix transformation example");

      // Define R,G,B colors for the point cloud
     pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> source_cloud_color_handler (source_cloud_t, 230, 20, 20);
     // We add the point cloud to the viewer and pass the color handler
     viewer.addPointCloud (source_cloud_t, source_cloud_color_handler, "original_cloud1");
     pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> source_cloud_color_handler1 (source_cloud, 255, 0, 255);
     // We add the point cloud to the viewer and pass the color handler
     viewer.addPointCloud (source_cloud, source_cloud_color_handler1, "original_cloud");

     pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> transformed_cloud_color_handler (transformed_cloud, 255, 255, 255); // Red
     viewer.addPointCloud (transformed_cloud, transformed_cloud_color_handler, "transformed_cloud");

     viewer.setBackgroundColor(0.05, 0.05, 0.05, 0); // Setting background to a dark grey
     viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "original_cloud");
     viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "transformed_cloud");
     viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "original_cloud1");

    cout << "Final transformation:" << endl << T << endl;
    //cout << "Final residual error: " << error << endl;
    viewer.spin();
    viewer.removePointCloud("original_cloud");
    viewer.spin();

    return 0;
}

